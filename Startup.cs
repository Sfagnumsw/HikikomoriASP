using HikikomoriWEB.MVC.HelperClass;
using HikikomoriWEB.MVC.HelperInterfaces;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using HikikomoriWEB.Domain.Repository;
using HikikomoriWEB.Domain;
using Microsoft.EntityFrameworkCore;

namespace HikikomoriWEB
{
    public class Startup
    {
        public IConfiguration Configuration { get; }
        public Startup(IConfiguration configuration) => Configuration = configuration;
        public void ConfigureServices(IServiceCollection services) //функционал подключается с помощью сервисов в MVC
        {
            Configuration.Bind("Project", new Config()); //подключение конфигурации из appsettings.json и связывание с соответсвующим классом
      
            //services.AddMvc(options => options.EnableEndpointRouting = false); //другой способ маршрутизации через configure(отключаем эндпоинт)

            services.AddTransient<IContent, ContentRepositoryEntity>(); //подключение функционала
            services.AddTransient<ICategory, CategoryRepositoryEntity>();
            services.AddTransient<IRemember, RememberRepositoryEntity>();
            services.AddTransient<DataManager>();

            services.AddDbContext<AppDbContext>(i => i.UseSqlServer(Config.ConnectionString)); //подключение контекста БД

            services.AddControllersWithViews().SetCompatibilityVersion(CompatibilityVersion.Version_3_0).AddSessionStateTempDataProvider(); //подключение поддержки MVC и совместимость версий asp.net core 3 , а так же сервисы для контроллеров и предствалений
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env) //очень важен порядок подключения методов
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage(); //если в окружении разработки то выводит подробную инфу об ошибках
            }
            app.UseStaticFiles(); //поддержка статичных файлов (css,js...)
            app.UseRouting(); //система маршрутизации (если используем AddMvc, то устанавливаем дефолРоут и отключаем эндпоинтРоут в сервисе)
            app.UseStatusCodePages(); //обработка ошибок http (404)
            app.UseEndpoints(endpoints => { endpoints.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}"); }); //маршрутизация под useRouting(если в адресе не прописан контроллер, то используем по умолчанию контроллер для главной страницы и меотод)
            //app.UseMvcWithDefaultRoute(); //другой способ маршрутизации
        }
    }
}
